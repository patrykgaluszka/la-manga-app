---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Trip Itinerary - Your Ultimate Travel Guide" } = Astro.props;
const currentPath = Astro.url.pathname;

import Logo from '../components/Logo.astro';

const menuItems = [
  { href: '/plan-wycieczki', label: 'Plan wycieczki', icon: 'üìÖ' },
  { href: '/lot-i-bagaz', label: 'Lot i baga≈º', icon: '‚úàÔ∏è' },
  { href: '/nurkowanie', label: 'Nurkowanie', icon: 'ü§ø' },
  { href: '/checklista', label: 'Checklista', icon: 'üß≥' },
  { href: '/jedzenie', label: 'Jedzenie', icon: 'üçΩÔ∏è' },
  { href: '/slowniczek', label: 'S≈Çowniczek', icon: 'üìñ' },
];
---

<!DOCTYPE html>
<html lang="pl" class="h-full">
<head>
  <meta charset="UTF-8" />
  <meta name="description" content={description} />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <style is:global>
    html {
      font-family: system-ui, sans-serif;
      scroll-behavior: smooth;
    }

    body {
      margin: 0;
      padding: 0;
      background-color: #f9fafb;
      color: #374151;
      line-height: 1.6;
    }

    /* Mobile menu animation */
    .mobile-menu {
      transition: transform 0.3s ease-in-out;
    }

    .mobile-menu.closed {
      transform: translateX(-100%);
    }

    .mobile-menu.open {
      transform: translateX(0);
    }

    /* Hero image overlay */
    .hero-overlay {
      background: linear-gradient(135deg, rgba(14, 165, 233, 0.01) 0%, rgba(2, 132, 199, 0.02) 100%);
    }

    /* Active navigation state */
    .nav-active {
      background-color: #e0f2fe;
      color: #0369a1;
      border-right: 3px solid #0ea5e9;
    }

    .nav-active:hover {
      background-color: #bae6fd;
      color: #0369a1;
    }

    /* Smooth transitions */
    * {
      transition: color 0.2s ease, background-color 0.2s ease;
    }

    /* Focus styles for accessibility */
    a:focus,
    button:focus {
      outline: 2px solid #0ea5e9;
      outline-offset: 2px;
    }

    /* Typography styles for markdown content */
    .prose > h1 {
      @apply text-3xl md:text-4xl font-bold text-gray-900 mb-5;
    }

    .prose > h2 {
      @apply text-2xl md:text-3xl font-bold text-gray-800 mb-4;
    }

    .prose > h3 {
      @apply text-xl md:text-2xl font-semibold text-gray-800 mb-3;
    }

    .prose > h4 {
      @apply text-lg md:text-xl font-semibold text-gray-700 mb-2;
    }

    .prose > h5 {
      @apply text-base md:text-lg font-medium text-gray-700 mb-2;
    }

    .prose > h6 {
      @apply text-sm md:text-base font-medium text-gray-600 mb-2;
    }

    .prose > p {
      @apply mb-4 text-gray-700 leading-relaxed;
    }

    .prose > ul {
      @apply mb-4 pl-6 space-y-2;
    }

    .prose > ul > li {
      @apply text-gray-700 leading-relaxed list-disc;
    }

    .prose a {
      @apply underline text-blue-600 hover:text-blue-800;
    }

    .prose a[target=_blank] {
      @apply visited:text-purple-800;
    }

    /* Print styles */
    @media print {
      .sidebar,
      .mobile-menu-button {
        display: none;
      }
      
      .main-content {
        margin-left: 0;
        width: 100%;
      }
    }
  </style>
  <title>{title}</title>
</head>
<body class="h-full bg-gray-50">
  <div class="flex min-h-screen">
    <!-- Mobile Menu Button -->
    <button 
      id="mobile-menu-button"
      class="lg:hidden fixed top-4 right-4 z-50 bg-ocean-500 text-white p-3 rounded-lg shadow-lg hover:bg-ocean-600 focus:outline-none focus:ring-2 focus:ring-ocean-400"
      aria-label="Toggle navigation menu"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>

    <!-- Sidebar Navigation -->
    <nav 
      id="sidebar"
      class="sidebar fixed lg:static inset-y-0 left-0 z-40 w-64 bg-white shadow-xl lg:shadow-lg transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out"
      role="navigation"
      aria-label="Main navigation"
    >
      <div class="p-6 border-b border-gray-200">
        <Logo class="hidden lg:flex" />
      </div>
      
      <ul class="py-4 space-y-2" role="menubar">
        {menuItems.map((item) => (
          <li role="none">
            <a 
              href={item.href}
              class={`flex items-center space-x-3 px-6 py-3 text-gray-700 hover:bg-ocean-50 hover:text-ocean-700 transition-colors ${
                currentPath === item.href ? 'nav-active' : ''
              }`}
              role="menuitem"
              aria-current={currentPath === item.href ? 'page' : undefined}
            >
              {currentPath === item.href && (
                <div class="absolute left-0 top-0 bottom-0 w-1 bg-ocean-500 rounded-r-full"></div>
              )}
              <span class="text-xl" aria-hidden="true">{item.icon}</span>
              <span class="font-medium">{item.label}</span>
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <!-- Overlay for mobile -->
    <div 
      id="sidebar-overlay"
      class="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden hidden"
      aria-hidden="true"
    ></div>

    <!-- Main Content -->
    <main class="flex-1 lg:ml-0 min-h-screen">
      <!-- Mobile Logo -->
      <div class="lg:hidden px-4 sm:px-6 py-6 border-b border-gray-200 bg-white">
        <Logo class="text-4xl" />
      </div>
      
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <article class="prose prose-lg max-w-none">
          <slot />
        </article>
      </div>
    </main>
  </div>

  <!-- Scroll to Top Button -->
  <button 
    id="scroll-to-top"
    class="fixed bottom-6 right-6 bg-ocean-500 text-white p-3 rounded-full shadow-lg hover:bg-ocean-600 focus:outline-none focus:ring-2 focus:ring-ocean-400 transition-all duration-300 opacity-0 invisible z-50"
    aria-label="Scroll to top"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
    </svg>
  </button>

  <script>
    // Mobile menu functionality
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('sidebar-overlay');

    function toggleMobileMenu() {
      const isOpen = !sidebar.classList.contains('-translate-x-full');
      
      if (isOpen) {
        sidebar.classList.add('-translate-x-full');
        overlay.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      } else {
        sidebar.classList.remove('-translate-x-full');
        overlay.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
      }
    }

    mobileMenuButton?.addEventListener('click', toggleMobileMenu);
    overlay?.addEventListener('click', toggleMobileMenu);

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !sidebar.classList.contains('-translate-x-full')) {
        toggleMobileMenu();
      }
    });

    // Close menu when clicking on navigation links (mobile)
    const navLinks = sidebar?.querySelectorAll('a[href]');
    navLinks?.forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth < 1024) {
          toggleMobileMenu();
        }
      });
    });

    // Scroll to top functionality
    const scrollToTopButton = document.getElementById('scroll-to-top');
    
    function toggleScrollButton() {
      if (window.scrollY > 300) {
        scrollToTopButton?.classList.remove('opacity-0', 'invisible');
        scrollToTopButton?.classList.add('opacity-100', 'visible');
      } else {
        scrollToTopButton?.classList.add('opacity-0', 'invisible');
        scrollToTopButton?.classList.remove('opacity-100', 'visible');
      }
    }
    
    function scrollToTop() {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
    
    // Show/hide button based on scroll position
    window.addEventListener('scroll', toggleScrollButton);
    
    // Scroll to top on click
    scrollToTopButton?.addEventListener('click', scrollToTop);
    
    // Initial check
    toggleScrollButton();
  </script>
</body>
</html>